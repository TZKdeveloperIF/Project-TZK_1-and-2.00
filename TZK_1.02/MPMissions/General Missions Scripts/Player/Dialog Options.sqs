; args: none

_idcMoney = IDC+0
_idcScore = IDC+1
_idcTowns = IDC+2
_idcIncome = IDC+3
_idcNumberedAI = IDC+4
_idcTransferGroup = IDC+5
_idcTransferAmount = IDC+6
_idcGroupMarkers = IDC+7
_idcReports = IDC+8
_idcIncomeRatio = IDC+9
_idcTransferCommand = IDC+10
_idcTransferCommandGroup = IDC+11
_idcCommandAI = IDC+12
_idcAIRespawn = IDC+13
_idcUpgradeStart = IDC+14
_idcUpgradeList = IDC+15
_idcWorkerBehaviour = IDC+16
_idcDestruction = IDC + 17
_idcIncomeRatioPlayer = IDC+18

; _idc defined above must consist with definition in description.ext.


_unit = player
_dlg = createDialog "OptionsDialog"

_mhq = mhq select siPlayer
_MCVs = MCV select siPlayer

ctrlShow [IDC_DEFAULT, false]
ctrlShow [_idcNumberedAI, false]

btnLeaderboard = false
btnDestruction = false
btnGrant = false 
btnAsk = false
btnGive = false
btnUpgrade = false
btnBuyUnits = false
btnShowStats = false
btnUnitCam = false
btnSatCam = false
btnCustomSoldiers = false
btnCommandAI = false
btnCommandPlayer = false
btnTransfer = false
btnNumberedAI = false


_report = report

_groups = groupMatrix select siPlayer
_groupsName = groupNameMatrix select siPlayer
_groupsMoney = groupMoneyMatrix select siPlayer
_groupsAI = groupAiMatrix select siPlayer
_groupUser = [groupPlayer]

_groupCommander = (groupCommander select siPlayer)

? (siPlayer == si0): _incomeRatio = pvIncomeRatio0 
? (siPlayer == si1): _incomeRatio = pvIncomeRatio1
? (siPlayer == si0): _incomeRatioPlayer = pvIncomeRatioPlayer0 
? (siPlayer == si1): _incomeRatioPlayer = pvIncomeRatioPlayer1

; AMOUNTS
_id = lbAdd [_idcTransferAmount, "Change"]; lbSetValue [_idcTransferAmount, _id, 50]
{ _id = lbAdd [_idcTransferAmount, format["%1", _x] ]; lbSetValue [_idcTransferAmount, _id, _x]; if (500==_x) then { lbSetCurSel [_idcTransferAmount, _id] } } foreach [100,200,500,1000,2000,5000,10000,20000]
_id = lbAdd [_idcTransferAmount, "All"]; lbSetValue [_idcTransferAmount, _id, 50000]

; PLAYER INCOME
{ _id = lbAdd [_idcIncomeRatio, format["%1%2", 100*_x, "%"] ]; lbSetValue [_idcIncomeRatio, _id, 100*_x]; if (_incomeRatio==_x) then { lbSetCurSel [_idcIncomeRatio, _id] } } foreach [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
{ _id = lbAdd [_idcIncomeRatioPlayer, format["%1%2", 100*_x, "%"] ]; lbSetValue [_idcIncomeRatioPlayer, _id, 100*_x]; if (_incomeRatioPlayer==_x) then { lbSetCurSel [_idcIncomeRatioPlayer, _id] } } foreach [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]

; AI MARKERS GROUP
_texts = []
_index = 0
{ _texts set [_index, format["%1 %2", [name leader _x, "AI"] select (_x in _groupsAI), _groupsName select _index] ]; _index=_index+1 } foreach _groups
lbClear _idcGroupMarkers
{ lbAdd [_idcGroupMarkers, _x];  } foreach _texts
lbAdd [_idcGroupMarkers, "All"]
lbSetCurSel [_idcGroupMarkers, giMarkersAI]

; REPORTS
lbClear _idcReports
{ lbAdd [_idcReports, _x] } foreach ["All", "Vehicles & Structs", "Structs", "None"]
lbSetCurSel [_idcReports, _report]

; TRANSFER COMMANDER
_idc = _idcTransferCommandGroup
lbClear _idc
_index = 0; { _id = lbAdd [_idc, format["%1 %2", [name leader _x, "AI"] select (_x in _groupsAI), _groupsName select _index] ]; lbSetValue[_idc, _id, _index]; if (_x == _groupCommander) then { lbSetCurSel [_idc, _index] }; _index=_index+1 } foreach _groups

; WORKER BEHAVIOUR
lbClear _idcWorkerBehaviour
{ lbAdd [_idcWorkerBehaviour, _x] } foreach ["Reckless", "Cautious"]
lbSetCurSel [_idcWorkerBehaviour, call format["pvWorkerBehaviour%1", siPlayer]]

_respawnObject = objNull
call format["_respawnObject = pvRespawnObjectAi%1", siPlayer]

_index = 0
_count = count structsRespawn
_respawnObjects = []
_currentAiRespawn = -1
? (alive _mhq): _respawnObjects = [_mhq]; _textPos = (getPos _mhq) call funcCalcTownDirDistFromPos; _id = lbAdd [_idcAIRespawn, format ["MHQ - %1", _textPos]]; if (_respawnObject == _mhq) then {lbSetCurSel [_idcAIRespawn, _id]; _currentAiRespawn = _id }
? ("alive _x " count _MCVs) > 0: { if (alive _x) then { _textPos = (getPos _x) call funcCalcTownDirDistFromPos; _id = lbAdd [_idcAIRespawn, format ["MCV - %1", _textPos]]; if (_respawnObject == _x) then {lbSetCurSel [_idcAIRespawn, _id]; _currentAiRespawn = _id } } } foreach _MCVs
{ if (alive _x) then { _respawnObjects = _respawnObjects + [_x] } } foreach _MCVs
#CheckNextStructType
	_type = structsRespawn select _index
	_structs = [siPlayer, _type] call funcGetWorkingStructures
	
	_name = (structDefs select _type) select sdName
	{ _textPos = (getPos _x) call funcCalcTownDirDistFromPos; _id = lbAdd [_idcAIRespawn, format ["%1 - %2", _name, _textPos]]; if (_respawnObject == _x) then {lbSetCurSel [_idcAIRespawn, _id]; _currentAiRespawn = _id } } foreach _structs
	_respawnObjects = _respawnObjects + _structs
	_index = _index + 1
	? (_index < _count): goto "CheckNextStructType"

 _grantedx = false;

#Update

? !(dialog): Exit
? !(alive _unit): Exit

_groupCommander = (groupCommander select siPlayer)

; GameTime, Timelimit
ctrlSetText [IDC_TEXT_GAMETIME_Options, [] call funcGetTimeString ]
ctrlSetText [IDC_TEXT_GAMETIME_Timelimit_Options, [] call funcGetTimeLimitString ]


; MONEY
_money = _groupsMoney select giPlayer
_moneySide = 0
_index = 0
{ _moneySide = _moneySide + (_groupsMoney select _index); _index=_index+1 } foreach _groups
ctrlSetText [_idcMoney, format["$ You/Side: %1/%2", _money, _moneySide]]


; DISABLE stuff for NON-commanders
? (groupPlayer != _groupCommander):  ctrlEnable [_idcAIRespawn, false]; ctrlEnable [_idcIncomeRatio, false]; ctrlEnable [_idcIncomeRatioPlayer, false]; ctrlEnable [_idcUpgradeList, true]; ctrlShow [_idcUpgradeStart, false]; ctrlEnable [_idcTransferCommandGroup, false]; ctrlShow [_idcTransferCommand, false]; ctrlEnable [_idcWorkerBehaviour, false]; ctrlShow [_idcDestruction, false]

; SCORE
_score = [siPlayer, giPlayer] call funcCalcScore
_groupCount = count (groupMatrix select si0) + count (groupMatrix select si1)
_place = 1
_siX = si0
_giX = 0
{ _scoreX = [_siX, _giX] call funcCalcScore; if (_score < _scoreX) then {_place=_place+1}; _giX=_giX+1 } foreach (groupScoreMatrix select _siX)
_siX = si1
_giX = 0
{ _scoreX = [_siX, _giX] call funcCalcScore; if (_score < _scoreX) then {_place=_place+1}; _giX=_giX+1 } foreach (groupScoreMatrix select _siX)
ctrlSetText [_idcScore, format["Score (Pos): %1 (%2/%3)", _score, _place, _groupCount]]

; PLAYER INCOME RATIO
_incomeRatio = [pvIncomeRatio0, pvIncomeRatio1] select (siPlayer == si1)
_selectedIncome = (lbValue [_idcIncomeRatio, lbCurSel _idcIncomeRatio])/100
? ((ctrlEnabled _idcIncomeRatio) && _incomeRatio != _selectedIncome): if (siPlayer==si0) then {pvIncomeRatio0=_selectedIncome;PublicVariable "pvIncomeRatio0"} else {pvIncomeRatio1=_selectedIncome;PublicVariable "pvIncomeRatio1"}
_incomeRatio = [pvIncomeRatio0, pvIncomeRatio1] select (siPlayer == si1)
? (_incomeRatio != _selectedIncome): lbSetCurSel[_idcIncomeRatio, 10*_incomeRatio]

_incomeRatioPlayer = [pvIncomeRatioPlayer0, pvIncomeRatioPlayer1] select (siPlayer == si1)
_selectedIncome = (lbValue [_idcIncomeRatioPlayer, lbCurSel _idcIncomeRatioPlayer])/100
? ((ctrlEnabled _idcIncomeRatioPlayer) && _incomeRatioPlayer != _selectedIncome): if (siPlayer==si0) then {pvIncomeRatioPlayer0=_selectedIncome;PublicVariable "pvIncomeRatioPlayer0"} else {pvIncomeRatioPlayer1=_selectedIncome;PublicVariable "pvIncomeRatioPlayer1"}
_incomeRatioPlayer = [pvIncomeRatioPlayer0, pvIncomeRatioPlayer1] select (siPlayer == si1)
? (_incomeRatioPlayer != _selectedIncome): lbSetCurSel[_idcIncomeRatioPlayer, 10*_incomeRatioPlayer]

; TOWNS
_townCount = count towns
_towns = 0
_income = 0
{ if ((_x select 3) == siPlayer) then { _towns=_towns+1; _income=_income+(_x select 2) } } foreach towns
ctrlSetText [_idcTowns, format["Towns: %1 of %2", _towns, _townCount]]

; INCOME
_income = _income*incomex
;------------------ Extra income ------------------
_numTowns=(numTownsRatio*_townCount) - ((numTownsRatio*_townCount) % 1)
_moreTowns=_towns-_numTowns
? (_moreTowns>0): _income = _income + _moreTowns*_moreTowns*1000
;------------------------------------
_players = count ((groupMatrix select siPlayer) - [groupCommander select siPlayer] - (groupAiMatrix select siPlayer)); _aileaders = count (groupAiMatrix select siPlayer)
_incomePlayer = 0; _incomeAiLeaders = 0
? _players > 0 : _incomePlayer = _income*(1-_incomeRatio)*_incomeRatioPlayer/_players; _incomePlayer = _incomePlayer - (_incomePlayer % 1)
? _aileaders > 0 : _incomeAiLeaders = _income*(1-_incomeRatio)*(1-_incomeRatioPlayer)/_aileaders; _incomeAiLeaders = _incomeAiLeaders - (_incomeAiLeaders % 1)
_incomeCommander = _income - _incomePlayer*_players - _incomeAiLeaders*_aileaders
ctrlSetText [_idcIncome, format["Income You/Side: %1/%2", [_incomePlayer, _incomeCommander] select (groupPlayer == (groupCommander select siPlayer)), _income]]

ctrlShow [_idcNumberedAI, bNumberedAI]

; GROUPS

_texts = []
_index = 0
{ _texts set [_index, format["%1 %2 $%3 %4", [name leader _x, "AI"] select (_x in _groupsAI), _groupsName select _index, _groupsMoney select _index, count units _x] ]; _index=_index+1 } foreach _groups
lbClear _idcTransferGroup

_index = 0
{ _setto=false; call format [{ _setto=grant_%1_%2_%3}, siPlayer, giPlayer, _index]; _id=lbAdd [_idcTransferGroup, _x]; lbSetPicture[_idcTransferGroup, _id, ["Images\square_empty.paa", "Images\square_green.paa"] select _setto]; _index=_index+1} foreach _texts

;_index = 0
;{ ctrlSetText [IDC_TEXT_GrantedStatus, ["DENIED", "GRANTED"] select _granted]; _index=_index+1 } foreach _groups

goto "SkipDisband"
; DISBAND
_units = units player
_units = _units - [player]
_texts = []
_index = 0
_indexAI = 2
{ while " format[""%1:%2"", groupPlayer, _indexAI] != format[""%1"", _x] && _indexAI < 13" do { _indexAI=_indexAI+1 }; _texts set [_index, format["%1%2%3%4", [_indexAI, _x] select (_indexAI==13), ["", ",In Vehicle"] select (_x != vehicle _x), [",No Legs", ""] select (canStand _x), ["", ",Bad Aim"] select (handsHit _x)] ]; _index=_index+1 } foreach _units
lbClear IDC_LB_UNITS
{ lbAdd [IDC_LB_UNITS, _x] } foreach _texts
#SkipDisband

; AI MARKERS GROUP
giMarkersAI = lbCurSel _idcGroupMarkers

; REPORTS
report = lbCurSel _idcReports
? _report != report : goto "SaveReport"

; AI RESPAWN POS
? (_currentAiRespawn != (lbCurSel _idcAIRespawn)): _currentAiRespawn = (lbCurSel _idcAIRespawn); call format["pvRespawnObjectAi%1 = (_respawnObjects select _currentAiRespawn); PublicVariable ""pvRespawnObjectAi%1""", siPlayer]

; WORKER BEHAVIOUR
call format["pvWorkerBehaviour%1", siPlayer]
? call format["pvWorkerBehaviour%1 != lbCurSel _idcWorkerBehaviour", siPlayer] : call format["pvWorkerBehaviour%1 = lbCurSel _idcWorkerBehaviour; PublicVariable ""pvWorkerBehaviour%1""", siPlayer]

; UPGRADES
_idc = _idcUpgradeList
_index = 0
_upgState = upgMatrix select siPlayer
lbClear _idc
{ _id=lbAdd [_idc, format["%1 $%2 %3min", _x select 0, _x select 1, _x select 2] ]; lbSetPicture[_idc, _id, ["Images\square_empty.paa", "Images\square_yellow.paa", "Images\square_green.paa"] select (_upgState select _index)]; _index=_index+1} foreach upgDefs


#CheckGranted	
_index = lbCurSel _idcTransferGroup
	? (_index != (lbCurSel _idcTransferGroup)): ctrlSetText [IDC_TEXT_GrantedStatus_Granted, ""]; ctrlSetText [IDC_TEXT_GrantedStatus_Denied, ""]; goto "Continue"
	? (_index == -1): ctrlSetText ctrlSetText [IDC_TEXT_GrantedStatus_Granted, ""]; ctrlSetText [IDC_TEXT_GrantedStatus_Denied, ""]; goto "Continue"
_group = _groups select _index
	? (groupPlayer == _group): ctrlSetText [IDC_TEXT_GrantedStatus_Granted, ""]; ctrlSetText [IDC_TEXT_GrantedStatus_Denied, ""]; goto "Continue"
	? (_group in _groupsAI && _group != _groupCommander): ctrlSetText [IDC_TEXT_GrantedStatus_Granted, ""]; ctrlSetText [IDC_TEXT_GrantedStatus_Denied, ""]; goto "Continue"
	? (_grantedx):  ctrlSetText [IDC_TEXT_GrantedStatus_Granted, "GRANTED"]; ctrlSetText [IDC_TEXT_GrantedStatus_Denied, ""];
	? (! _grantedx): ctrlSetText [IDC_TEXT_GrantedStatus_Denied, "DENIED"]; ctrlSetText [IDC_TEXT_GrantedStatus_Granted, ""];
#Continue


? btnGrant : btnGrant=false; goto "GrantMoney"
? btnAsk : btnAsk=false; goto "AskMoney"
? btnGive : btnGive=false; goto "GiveMoney"
? btnBuyUnits : btnBuyUnits=false; goto "BuyUnits"
? btnShowStats : btnShowStats=false; goto "ShowStats"
? btnUnitCam : btnUnitCam=false; goto "UnitCam"
? btnSatCam : btnSatCam=false; goto "SatCam"
? btnUpgrade : btnUpgrade=false; goto "Upgrade"
? btnLeaderboard : btnLeaderboard=false; goto "Leaderboard"
? btnCommandAI : btnCommandAI=false; goto "CommandAI"
? btnCommandPlayer : btnCommandPlayer=false; goto "CommandPlayer"
? btnTransfer : btnTransfer=false; goto "TransferCommand"
? btnCustomSoldiers : btnCustomSoldiers=false; goto "CustomSoldiers"
? btnNumberedAI : btnNumberedAI=false; goto "SaveNumberedAI"
? btnDestruction : btnDestruction=false; goto "DestructBuildings"


~0.2
goto "Update"

#GrantMoney
	_index = lbCurSel _idcTransferGroup
	? (_index == -1): hint "No Group Selected"; goto "Update"
	_group = _groups select _index
	? (groupPlayer == _group): hint "You are trying to grant money to yourself"; goto "Update"
	? (_group in _groupsAI): hint "You can not grant Money to an AI"; goto "Update"
      call format [{grant_%1_%2_%3 = !grant_%1_%2_%3; publicvariable "grant_%1_%2_%3"; },siPlayer,giPlayer,_index]
	goto "Update"

#AskMoney
	_index = lbCurSel _idcTransferGroup
	? (_index == -1): hint "No Group Selected"; goto "Update"
	_group = _groups select _index
	? (groupPlayer == _group): hint "You are trying to give money to yourself"; goto "Update"
	? (_group in _groupsAI && _group != _groupCommander): hint "You can only ask money from an AI commander"; goto "Update"
	_amount = lbValue [_idcTransferAmount, lbCurSel _idcTransferAmount]
      _granted = false;
      call format [{_granted = grant_%1_%2_%3},siPlayer,_index,giPlayer]; _grantedx = true;
      ? ((_amount <= 500) and (((groupMoneyMatrix select siPlayer) select giPlayer) < 500) and (((groupMatrix select siPlayer) select _index) == _groupCommander)): _granted = true;
	? (_granted): [siPlayer, _index, giPlayer, _amount] exec "Common\SendMoneyGive.sqs"
      ? (! _granted): hint "Permission Denied!"; _grantedx = false;
	goto "Update"

#GiveMoney
	_index = lbCurSel _idcTransferGroup
	? (_index == -1): hint "No Group Selected"; goto "Update"
	_group = _groups select _index
	? (groupPlayer == _group): hint "You are trying to give money to yourself"; goto "Update"
	; ? (_group in _groupsAI && _group != _groupCommander): hint "You can only give money to an AI commander"; goto "Update"
	_amount = lbValue [_idcTransferAmount, lbCurSel _idcTransferAmount]
	? _amount == 50 : _amount = ( _money % 100 )
	? _amount == 50000 : _amount = _money
	[siPlayer, giPlayer, _index, _amount] exec "Common\SendMoneyGive.sqs"
	goto "Update"
	
#DisbandUnit
	_index = lbCurSel IDC_LB_UNITS
	? (_index == -1): hint "No Unit Selected"; goto "Update"
	_ai = _units select _index
	? !(isNull _ai) && (alive _ai) && (local _ai): _ai setDamage 1
	~1
	? !(alive _ai): deleteVehicle _ai
	goto "Update"

#Upgrade
	_index = lbCurSel _idcUpgradeList
	? (_index == -1): hint "No Upgrade Selected"; goto "Update"

	_controlCenters = [siPlayer, stComm] call funcGetWorkingStructures
	? ((count _controlCenters) == 0): hint "No Working Comm Center"; goto "Update"

	_cost = (upgDefs select _index) select 1
	? (_money < _cost): hint "Not Enough Cash"; goto "Update"

	[_index] exec "Player\SendUpgrade.sqs"
	goto "Update"

#BuyUnits
	_controlCenters = [siPlayer, stComm] call funcGetWorkingStructures
	? ((count _controlCenters) == 0): Hint "No Working Comm Center"; goto "Update"
	
	closeDialog 0
	~0.1
	[objNull, 0] exec "Player\Dialog BuyUnits.sqs"
	Exit

#Leaderboard
	closeDialog 0
	~0.1
	[] exec "Player\Dialog Leaderboard.sqs"
	Exit

#ShowStats
	closeDialog 0
	~0.1
	[siPlayer] exec "Player\Dialog Stats.sqs"
	Exit

#UnitCam
	_controlCenters = [siPlayer, stSatRec] call funcGetWorkingStructures
	? ((count _controlCenters) == 0): Hint "No Working Camera Receiver"; goto "Update"

	; ? (2 != (upgMatrix select siPlayer) select upgUnitCam): Hint "Not available yet\n(not upgraded)"; goto "Update"

	closeDialog 0
	~0.1
	[unitcamUnit] exec "Player\Dialog UnitCam.sqs"
	Exit

#SatCam
	; _controlCenters = [siPlayer, stComm] call funcGetWorkingStructures
	; ? ((count _controlCenters) == 0): Hint "No Working Comm Center"; goto "Update"
	_satrec = [siPlayer, stSatRec] call funcGetWorkingStructures
	? ((count _satrec) == 0): Hint "No Working Camera Receiver"; goto "Update"

	? (2 != (upgMatrix select siPlayer) select upgSatCam): Hint "Not available yet\n(not upgraded)"; goto "Update"

	closeDialog 0
	~0.1
	[] exec "Player\Dialog SatCam.sqs"
	Exit

#CustomSoldiers
	closeDialog 0
	~0.1
	[player, player, true, 0] exec "Player\Dialog Equipment.sqs"
	Exit

#CommandAI
	closeDialog 0
	~0.1
	[] exec "Player\Dialog AIGroupOrders.sqs"
	Exit
	
#CommandPlayer
	closeDialog 0
	~0.1
	[] exec "Player\Dialog PlayerGroupOrders.sqs"
	Exit
	
#TransferCommand
	_idc = _idcTransferCommandGroup
	_gi = lbValue [_idc, lbCurSel _idc]
  _group = (groupMatrix select siPlayer) select _gi
	? (_group == _groupCommander): goto "Update"
	? (_group in (groupAiMatrix select siPlayer)): hint "You cant transfer command to an AI group leader"; goto "Update"
	pvCO = _gi + 18*siPlayer; PublicVariable "pvCO"
	goto "Update"

#SaveReport
  _report = report
  unitSetting = "SoldierWB" camCreate [10,10,10]
  removeAllWeapons unitSetting
  unitSetting addMagazine "M16"
  _i = 0
  while "_i < _report" do { unitSetting addMagazine "M16"; _i=_i+1 }
  _entry = format["%1_EnemyReportLevel", localize "STR_CRCTI_VER"]
  unitSetting saveStatus _entry
  deleteVehicle unitSetting
  goto "Update"

#SaveNumberedAI
  bNumberedAI = !bNumberedAI
  unitSetting = "SoldierWB" camCreate [10,10,10]
  removeAllWeapons unitSetting
  unitSetting addMagazine "M16"
  ? bNumberedAI : unitSetting addMagazine "M16"
  _entry = format["%1_NumberedAI", localize "STR_CRCTI_VER"]
  unitSetting saveStatus _entry
  deleteVehicle unitSetting
  goto "Update"

#DestructBuildings
	closeDialog 0
	~0.1
	[] exec "Player\Dialog Destruction.sqs"
	Exit
  